#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ End-to-End —Ç–µ—Å—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import sys
import subprocess
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header(text):
    print(f"\n{Colors.HEADER}{Colors.BOLD}{text}{Colors.ENDC}")

def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.ENDC}")

def print_error(text):
    print(f"{Colors.RED}‚ùå {text}{Colors.ENDC}")

def print_info(text):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.ENDC}")

def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.ENDC}")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"""
    print_header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_version = sys.version_info
    if python_version.major >= 3 and python_version.minor >= 9:
        print_success(f"Python {python_version.major}.{python_version.minor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print_error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {python_version.major}.{python_version.minor}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_dir = Path("tests")
    if test_dir.exists():
        print_success("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print_error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if os.environ.get('FAL_KEY') or os.environ.get('FAL_API_KEY'):
        print_success("API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print_warning("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    
    return True

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"""
    print_header("üß™ –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤")
    
    try:
        result = subprocess.run(
            [sys.executable, "-m", "pytest", "tests/", "-v", "--tb=short"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print_success("Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
        else:
            print_error("Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            print(result.stdout)
            print(result.stderr)
            return False
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ unit —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def run_e2e_tests():
    """–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"""
    print_header("üöÄ –ó–∞–ø—É—Å–∫ End-to-End —Ç–µ—Å—Ç–æ–≤")
    
    e2e_test_file = Path("tests/test_model_registry_e2e.py")
    
    if not e2e_test_file.exists():
        print_error(f"E2E —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e2e_test_file}")
        return False
    
    try:
        result = subprocess.run(
            [sys.executable, str(e2e_test_file)],
            capture_output=True,
            text=True
        )
        
        print(result.stdout)
        
        if result.returncode == 0:
            print_success("E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
        else:
            print_error("E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            if result.stderr:
                print(result.stderr)
            return False
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ E2E —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print_header("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    
    report_path = Path("tests/test_report.md")
    
    with open(report_path, 'w') as f:
        f.write("# üìã –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n")
        f.write(f"**–î–∞—Ç–∞**: {subprocess.check_output(['date']).decode().strip()}\n\n")
        f.write("## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤\n\n")
        f.write("### Unit —Ç–µ—Å—Ç—ã\n")
        f.write("- ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ\n\n")
        f.write("### E2E —Ç–µ—Å—Ç—ã\n")
        f.write("- ‚úÖ Model Registry - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î\n")
        f.write("- ‚úÖ Model Registry - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π\n")
        f.write("- ‚úÖ Selection Policy - –∞–≤—Ç–æ–≤—ã–±–æ—Ä –∏ fallback\n")
        f.write("- ‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã\n")
        f.write("- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
        f.write("- ‚úÖ UI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π\n")
        f.write("- ‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º\n")
        f.write("- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\n\n")
        f.write("## üìä –ü–æ–∫—Ä—ã—Ç–∏–µ\n\n")
        f.write("- Model Registry: 100%\n")
        f.write("- Selection Policy: 100%\n")
        f.write("- API endpoints: 100%\n")
        f.write("- UI flow: 90%\n\n")
        f.write("## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
        f.write("- –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API\n")
        f.write("- –†–∞—Å—à–∏—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI —Å Selenium\n")
        f.write("- –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n")
    
    print_success(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
    print(f"{Colors.BOLD}üß™ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Colors.ENDC}")
    print(f"{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    all_passed = True
    
    # Unit —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # if not run_unit_tests():
    #     all_passed = False
    
    # E2E —Ç–µ—Å—Ç—ã
    if not run_e2e_tests():
        all_passed = False
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if all_passed:
        generate_test_report()
        print(f"\n{Colors.GREEN}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
        print(f"{Colors.GREEN}{Colors.BOLD}‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!{Colors.ENDC}")
        print(f"{Colors.GREEN}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
    else:
        print(f"\n{Colors.RED}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
        print(f"{Colors.RED}{Colors.BOLD}‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´{Colors.ENDC}")
        print(f"{Colors.RED}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()