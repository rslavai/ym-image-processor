"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Yandex Market Image Processor.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gradio –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import gradio as gr
from PIL import Image
import numpy as np
from pathlib import Path
import sys
import time
from typing import Optional, Tuple
import io
import zipfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from src.processors.background import BackgroundRemover
from src.utils.image_helpers import calculate_image_complexity


class ImageProcessorUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤."""
        self.remover = None
        self._init_processor()
        
    def _init_processor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞."""
        try:
            self.remover = BackgroundRemover({
                'debug': False,
                'use_cache': True
            })
            return "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    def process_single_image(
        self, 
        image: Optional[Image.Image],
        use_alpha_matting: bool,
        post_process: bool,
        min_object_size: int,
        show_mask: bool
    ) -> Tuple[Optional[Image.Image], Optional[Image.Image], str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–∞—Å–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        """
        if image is None:
            return None, None, "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        try:
            start_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            self.remover.use_alpha_matting = use_alpha_matting
            self.remover.post_process = post_process
            self.remover.min_object_size = min_object_size
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity = calculate_image_complexity(image)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞
            if show_mask:
                result, mask = self.remover.process(image, return_mask=True)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É –≤ PIL Image
                mask_image = Image.fromarray(mask, mode='L')
            else:
                result = self.remover.process(image)
                mask_image = None
            
            # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = time.time() - start_time
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            info = f"""
### ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {processing_time:.2f} —Å–µ–∫  
**–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** {image.size[0]}x{image.size[1]}  
**–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** {complexity['overall_complexity']:.2f}  
**–†–µ–∂–∏–º:** {'Alpha Matting' if use_alpha_matting else '–û–±—ã—á–Ω—ã–π'}  
**–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞:** {'–í–∫–ª—é—á–µ–Ω–∞' if post_process else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
            """
            
            return result, mask_image, info
            
        except Exception as e:
            error_info = f"### ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n{str(e)}"
            return None, None, error_info
    
    def process_batch(
        self,
        files,
        use_alpha_matting: bool,
        post_process: bool,
        min_object_size: int
    ) -> Tuple[Optional[str], str]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ø—É—Ç—å –∫ zip –∞—Ä—Ö–∏–≤—É, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        """
        if not files:
            return None, "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.remover.use_alpha_matting = use_alpha_matting
            self.remover.post_process = post_process
            self.remover.min_object_size = min_object_size
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip –∞—Ä—Ö–∏–≤
            zip_buffer = io.BytesIO()
            
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                processed = 0
                errors = 0
                
                for file in files:
                    try:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image = Image.open(file.name)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                        result = self.remover.process(image)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
                        img_buffer = io.BytesIO()
                        result.save(img_buffer, format='PNG')
                        
                        filename = Path(file.name).stem + '_no_bg.png'
                        zip_file.writestr(filename, img_buffer.getvalue())
                        
                        processed += 1
                        
                    except Exception as e:
                        errors += 1
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file.name}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤
            output_path = "processed_images.zip"
            with open(output_path, 'wb') as f:
                f.write(zip_buffer.getvalue())
            
            info = f"""
### ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:** {processed}  
**–û—à–∏–±–æ–∫:** {errors}  
**–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {len(files)}
            """
            
            return output_path, info
            
        except Exception as e:
            return None, f"### ‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n{str(e)}"
    
    def create_demo_image(self, demo_type: str) -> Optional[Image.Image]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            from PIL import ImageDraw
            
            if demo_type == "–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç":
                img = Image.new('RGB', (400, 400), color=(220, 220, 220))
                draw = ImageDraw.Draw(img)
                draw.ellipse([100, 100, 300, 300], fill=(255, 100, 100))
                
            elif demo_type == "–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω":
                img = Image.new('RGB', (400, 400))
                pixels = img.load()
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
                for i in range(400):
                    for j in range(400):
                        pixels[i, j] = (
                            int(i * 255 / 400),
                            int(j * 255 / 400),
                            200
                        )
                draw = ImageDraw.Draw(img)
                # –û–±—ä–µ–∫—Ç
                draw.rectangle([150, 150, 250, 250], fill=(0, 200, 0))
                
            elif demo_type == "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä":
                img = Image.new('RGB', (400, 400), color=(240, 240, 240))
                draw = ImageDraw.Draw(img)
                # –ö–æ—Ä–æ–±–∫–∞ –≤ 3D
                # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
                draw.polygon([(100, 200), (200, 150), (200, 350), (100, 300)], 
                           fill=(100, 150, 200), outline=(50, 75, 100), width=2)
                # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å
                draw.polygon([(100, 200), (200, 150), (300, 200), (200, 250)], 
                           fill=(120, 170, 220), outline=(50, 75, 100), width=2)
                # –ë–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å
                draw.polygon([(200, 150), (300, 200), (300, 300), (200, 350)], 
                           fill=(80, 130, 180), outline=(50, 75, 100), width=2)
            else:
                return None
                
            return img
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ: {e}")
            return None
    
    def create_interface(self) -> gr.Blocks:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio."""
        
        with gr.Blocks(
            title="YM Image Processor",
            theme=gr.themes.Soft()
        ) as interface:
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            gr.Markdown(
                """
                # üõçÔ∏è Yandex Market Image Processor
                
                –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
                –¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å: **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞**
                """
            )
            
            with gr.Tabs():
                # –í–∫–ª–∞–¥–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with gr.TabItem("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
                    with gr.Row():
                        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤–≤–æ–¥
                        with gr.Column(scale=1):
                            input_image = gr.Image(
                                label="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                type="pil",
                                height=400
                            )
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–µ
                            with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", open=False):
                                alpha_matting = gr.Checkbox(
                                    label="Alpha Matting (–º—è–≥–∫–∏–µ –∫—Ä–∞—è)",
                                    value=False,
                                    info="–ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞–µ–≤, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ"
                                )
                                post_process = gr.Checkbox(
                                    label="–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏",
                                    value=True,
                                    info="–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –º–∞—Å–∫–∏"
                                )
                                min_size = gr.Slider(
                                    minimum=100,
                                    maximum=5000,
                                    value=1000,
                                    step=100,
                                    label="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ (–ø–∏–∫—Å.)",
                                    info="–û–±—ä–µ–∫—Ç—ã –º–µ–Ω—å—à–µ —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã"
                                )
                                show_mask = gr.Checkbox(
                                    label="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É",
                                    value=False,
                                    info="–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"
                                )
                            
                            # –ö–Ω–æ–ø–∫–∏
                            with gr.Row():
                                process_btn = gr.Button(
                                    "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å",
                                    variant="primary",
                                    scale=2
                                )
                                clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", scale=1)
                            
                            # –î–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            with gr.Accordion("üé® –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", open=False):
                                demo_type = gr.Radio(
                                    choices=["–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç", "–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä"],
                                    label="–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                    value="–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç"
                                )
                                create_demo_btn = gr.Button("–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ")
                        
                        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        with gr.Column(scale=1):
                            output_image = gr.Image(
                                label="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                                type="pil",
                                height=400
                            )
                            mask_image = gr.Image(
                                label="–ú–∞—Å–∫–∞",
                                type="pil",
                                height=300,
                                visible=False
                            )
                            info_text = gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞")
                    
                    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                    process_btn.click(
                        fn=self.process_single_image,
                        inputs=[input_image, alpha_matting, post_process, min_size, show_mask],
                        outputs=[output_image, mask_image, info_text]
                    )
                    
                    clear_btn.click(
                        fn=lambda: (None, None, None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞"),
                        inputs=[],
                        outputs=[input_image, output_image, mask_image, info_text]
                    )
                    
                    create_demo_btn.click(
                        fn=self.create_demo_image,
                        inputs=[demo_type],
                        outputs=[input_image]
                    )
                    
                    # –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –º–∞—Å–∫–∏
                    show_mask.change(
                        fn=lambda x: gr.update(visible=x),
                        inputs=[show_mask],
                        outputs=[mask_image]
                    )
                
                # –í–∫–ª–∞–¥–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with gr.TabItem("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"):
                    gr.Markdown(
                        """
                        ### –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        
                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ZIP –∞—Ä—Ö–∏–≤.
                        """
                    )
                    
                    with gr.Row():
                        with gr.Column():
                            batch_files = gr.File(
                                label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                file_count="multiple",
                                file_types=["image"]
                            )
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", open=True):
                                batch_alpha = gr.Checkbox(label="Alpha Matting", value=False)
                                batch_post = gr.Checkbox(label="–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞", value=True)
                                batch_min_size = gr.Slider(
                                    minimum=100,
                                    maximum=5000,
                                    value=1000,
                                    label="–ú–∏–Ω. —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞"
                                )
                            
                            batch_process_btn = gr.Button(
                                "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ",
                                variant="primary"
                            )
                        
                        with gr.Column():
                            batch_output = gr.File(
                                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                                visible=False
                            )
                            batch_info = gr.Markdown("")
                    
                    batch_process_btn.click(
                        fn=self.process_batch,
                        inputs=[batch_files, batch_alpha, batch_post, batch_min_size],
                        outputs=[batch_output, batch_info]
                    ).then(
                        fn=lambda x: gr.update(visible=x is not None),
                        inputs=[batch_output],
                        outputs=[batch_output]
                    )
                
                # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                with gr.TabItem("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"):
                    gr.Markdown(
                        """
                        ## Yandex Market Image Processor
                        
                        ### üìå –í–µ—Ä—Å–∏—è: 0.1.0
                        
                        ### üîß –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
                        - **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ U¬≤-Net
                        - **–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞** - —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å–æ–∫
                        - **Alpha Matting** - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∫—Ä–∞–µ–≤
                        - **–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                        
                        ### üöÄ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:
                        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–Ω–µ–π
                        - –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
                        - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                        - –ü–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        
                        ### üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                        - –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —á–µ—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–æ–º –∏ —Ñ–æ–Ω–æ–º
                        - Alpha Matting —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º—è–≥–∫–∏–º–∏ –∫—Ä–∞—è–º–∏ (—Ç–∫–∞–Ω—å, –≤–æ–ª–æ—Å—ã)
                        - –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É–±—Ä–∞—Ç—å –º–µ–ª–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                        
                        ### üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
                        - Python 3.8+
                        - rembg (U¬≤-Net)
                        - OpenCV
                        - Pillow
                        - Gradio
                        """
                    )
            
            # –§—É—Ç–µ—Ä
            gr.Markdown(
                """
                ---
                <center>
                    Made with ‚ù§Ô∏è for Yandex Market | 
                    <a href="https://github.com/anthropics/claude-code" target="_blank">ü§ñ Generated with Claude Code</a>
                </center>
                """,
                elem_id="footer"
            )
        
        return interface


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ Yandex Market Image Processor UI...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    ui = ImageProcessorUI()
    interface = ui.create_interface()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    interface.launch(
        server_name="127.0.0.1",
        server_port=7861,
        share=False,
        inbrowser=True
    )


if __name__ == "__main__":
    main()