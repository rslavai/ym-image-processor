"""
End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è Model Registry System
–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –æ—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import os
import sys
import json
import time
import sqlite3
import tempfile
import requests
from pathlib import Path
from PIL import Image
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.models.model_registry import ModelRegistry
from src.models.selection_policy import ModelSelectionPolicy as SelectionPolicy
from src.processors.batch_processor import BatchProcessor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TEST_IMAGE_PATH = Path("tests/fixtures/test_product.jpg")
TEST_DB_PATH = "test_database.db"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
os.environ['DATABASE_PATH'] = TEST_DB_PATH


class TestModelRegistryE2E:
    """End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Model Registry"""
    
    @classmethod
    def setup_class(cls):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not TEST_IMAGE_PATH.exists():
            TEST_IMAGE_PATH.parent.mkdir(parents=True, exist_ok=True)
            img = Image.new('RGB', (800, 800), color='white')
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä
            from PIL import ImageDraw
            draw = ImageDraw.Draw(img)
            draw.ellipse([200, 200, 600, 600], fill='red')
            img.save(TEST_IMAGE_PATH)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(TEST_DB_PATH):
            os.remove(TEST_DB_PATH)
        
    @classmethod
    def teardown_class(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if os.path.exists(TEST_DB_PATH):
            os.remove(TEST_DB_PATH)
    
    def test_01_database_initialization(self):
        """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        # db_manager –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TEST_DB_PATH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from src.database.db_manager import DatabaseManager
        test_db_manager = DatabaseManager(TEST_DB_PATH)
        test_db_manager.initialize_database()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π db_manager –¥–ª—è ModelRegistry
        import src.database.db_manager as db_module
        db_module.db_manager = test_db_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
        conn = sqlite3.connect(TEST_DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='models'")
        assert cursor.fetchone() is not None, "–¢–∞–±–ª–∏—Ü–∞ models –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º seed –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM models")
        count = cursor.fetchone()[0]
        assert count >= 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 3 –º–æ–¥–µ–ª–∏, –Ω–∞–π–¥–µ–Ω–æ {count}"
        
        conn.close()
        print("‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def test_02_model_registry_loading(self):
        """–¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ ModelRegistry"""
        print("\nüß™ –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä")
        
        registry = ModelRegistry()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = registry.get_all_models(active_only=True)
        assert len(models) > 0, "–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        for model in models:
            assert hasattr(model, 'id'), "–ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç id"
            assert hasattr(model, 'name'), "–ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç name"
            assert hasattr(model, 'spec'), "–ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç spec"
            print(f"  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model.name} {model.version}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        model_v2 = registry.get_model_by_id('flux-kontext-lora-v2')
        assert model_v2 is not None, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å flux-kontext-lora-v2"
        assert model_v2.version == 'v2', "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏"
        
        print("‚úÖ –†–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_03_selection_policy(self):
        """–¢–µ—Å—Ç 3: –ü–æ–ª–∏—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤—ã–±–æ—Ä–∞")
        
        registry = ModelRegistry()
        policy = SelectionPolicy()
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å V2 –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é)
        result = policy.select_model()
        assert result.model is not None, "–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        assert result.model.id == 'flux-kontext-lora-v2', f"–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å: {result.model.id}"
        assert 'priority' in result.explanation.lower(), f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞: {result.explanation}"
        print(f"  ‚úì –ê–≤—Ç–æ–≤—ã–±–æ—Ä: {result.model.name} {result.model.version} - {result.explanation}")
        
        # –¢–µ—Å—Ç fallback (—Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å V2)
        fallback_result = policy.get_fallback_model('flux-kontext-lora-v2', 'API timeout')
        assert fallback_result.model is not None, "Fallback –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert fallback_result.model.id == 'flux-kontext-lora-v1', f"–ù–µ–≤–µ—Ä–Ω–∞—è fallback –º–æ–¥–µ–ª—å: {fallback_result.model.id}"
        print(f"  ‚úì Fallback: {fallback_result.model.name} {fallback_result.model.version} - {fallback_result.explanation}")
        
        print("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_04_api_endpoints(self):
        """–¢–µ—Å—Ç 4: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å mock)
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç GET /models
        models_response = {
            "success": True,
            "models": [
                {
                    "id": "flux-kontext-lora-v2",
                    "name": "FLUX Kontext LoRA",
                    "version": "v2",
                    "pros": ["–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–¢–æ—á–Ω—ã–µ –∫—Ä–∞—è"],
                    "cons": ["–ú–µ–¥–ª–µ–Ω–Ω–µ–µ V1"]
                }
            ]
        }
        assert models_response["success"] == True
        assert len(models_response["models"]) > 0
        print("  ‚úì GET /models –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç GET /models/:id
        model_detail_response = {
            "success": True,
            "model": {
                "id": "flux-kontext-lora-v2",
                "name": "FLUX Kontext LoRA",
                "version": "v2",
                "spec": {
                    "guidance_scale": 3.5,
                    "num_inference_steps": 50
                }
            }
        }
        assert model_detail_response["model"]["spec"]["guidance_scale"] == 3.5
        print("  ‚úì GET /models/:id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏")
        
        print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_05_image_processing_with_model(self):
        """–¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
        print("\nüß™ –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è API –∫–ª—é—á–µ–π
        os.environ['OPENAI_API_KEY'] = 'test-key'
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = BatchProcessor(TEST_DB_PATH)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é
        if os.environ.get('FAL_KEY') or os.environ.get('FAL_API_KEY'):
            print("  ‚ÑπÔ∏è  API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_image = Image.open(TEST_IMAGE_PATH)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å V2
            result_v2 = processor._remove_background_fal_v2(
                test_image, 
                "test prompt",
                model_id='flux-kontext-lora-v2'
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            if result_v2:
                assert isinstance(result_v2, Image.Image), "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"
                print("  ‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å flux-kontext-lora-v2 —É—Å–ø–µ—à–Ω–∞")
            else:
                print("  ‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("  ‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    
    def test_06_ui_model_selection_flow(self):
        """–¢–µ—Å—Ç 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ UI"""
        print("\nüß™ –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π:
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
        # 2. –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –º–æ–¥–µ–ª–∏ –∏–∑ API
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å
        # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        # 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π
        registry = ModelRegistry()
        models = registry.get_all_models(active_only=True)
        print(f"  ‚úì –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_model_id = 'flux-kontext-lora-v1'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª V1
        selected_model = registry.get_model_by_id(selected_model_id)
        assert selected_model is not None
        print(f"  ‚úì –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {selected_model.name} {selected_model.version}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        assert len(selected_model.pros) > 0, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö"
        assert len(selected_model.cons) > 0, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö"
        print(f"  ‚úì –®–∞–≥ 3: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print(f"    - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {len(selected_model.pros)} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"    - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {len(selected_model.cons)} –ø—É–Ω–∫—Ç–æ–≤")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        processor = BatchProcessor(db_path=TEST_DB_PATH)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª
        class FakeFile:
            def __init__(self, path):
                self.filename = os.path.basename(path)
                self.stream = open(path, 'rb')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        print(f"  ‚úì –®–∞–≥ 4: –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –º–æ–¥–µ–ª—å—é {selected_model_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"  ‚úì –®–∞–≥ 5: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
        
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_07_fallback_scenario(self):
        """–¢–µ—Å—Ç 7: –°—Ü–µ–Ω–∞—Ä–∏–π fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        print("\nüß™ –¢–µ—Å—Ç 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞")
        
        policy = SelectionPolicy()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É V2
        fallback1 = policy.get_fallback_model('flux-kontext-lora-v2', 'API error')
        assert fallback1.model.id == 'flux-kontext-lora-v1'
        print(f"  ‚úì V2 ‚Üí V1: {fallback1.explanation}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É V1
        fallback2 = policy.get_fallback_model('flux-kontext-lora-v1', 'API error')
        assert fallback2.model.id == 'birefnet-fallback'
        print(f"  ‚úì V1 ‚Üí BiRefNet: {fallback2.explanation}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É BiRefNet (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
        fallback3 = policy.get_fallback_model('birefnet-fallback', 'API error')
        assert fallback3.model is None
        print(f"  ‚úì BiRefNet ‚Üí None: {fallback3.explanation}")
        
        print("‚úÖ Fallback —Ü–µ–ø–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_08_error_handling(self):
        """–¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
        
        registry = ModelRegistry()
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
        model = registry.get_model_by_id('non-existent-model')
        assert model is None, "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏"
        print("  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏")
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º model_id
        processor = BatchProcessor(db_path=TEST_DB_PATH)
        # –ü—Ä–∏ –ø—É—Å—Ç–æ–º model_id –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä
        print("  ‚úì –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ model_id")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö END-TO-END –¢–ï–°–¢–û–í MODEL REGISTRY")
    print("=" * 60)
    
    test_suite = TestModelRegistryE2E()
    test_suite.setup_class()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        test_suite.test_01_database_initialization()
        test_suite.test_02_model_registry_loading()
        test_suite.test_03_selection_policy()
        test_suite.test_04_api_endpoints()
        test_suite.test_05_image_processing_with_model()
        test_suite.test_06_ui_model_selection_flow()
        test_suite.test_07_fallback_scenario()
        test_suite.test_08_error_handling()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        raise
    
    finally:
        test_suite.teardown_class()


if __name__ == "__main__":
    run_all_tests()