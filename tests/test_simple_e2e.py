#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π E2E —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Model Registry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
"""

import os
import sys
import json
import tempfile
from pathlib import Path
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_model_registry_full_flow():
    """–ü–æ–ª–Ω—ã–π End-to-End —Ç–µ—Å—Ç Model Registry —Å–∏—Å—Ç–µ–º—ã"""
    print("üéØ –ü–†–û–°–¢–û–ô E2E –¢–ï–°–¢: Model Registry System")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüìã –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ú–æ–∫–∞–µ–º OPENAI_API_KEY
    os.environ['OPENAI_API_KEY'] = 'test-key'
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
        test_db_path = tmp_db.name
    
    os.environ['DATABASE_PATH'] = test_db_path
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î —Å–æ–∑–¥–∞–Ω–∞: {test_db_path}")
    
    try:
        # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("\nüîß –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        from src.database.db_manager import DatabaseManager
        from src.models.model_registry import ModelRegistry
        from src.models.selection_policy import ModelSelectionPolicy
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        db_manager = DatabaseManager(test_db_path)
        db_manager.initialize_database()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π db_manager
        import src.database.db_manager as db_module
        db_module.db_manager = db_manager
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º Model Registry
        print("\nüìä –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Model Registry")
        
        registry = ModelRegistry()
        models = registry.get_all_models(active_only=True)
        
        assert len(models) >= 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 3 –º–æ–¥–µ–ª–∏, –Ω–∞–π–¥–µ–Ω–æ {len(models)}"
        
        model_names = [f"{m.name} {m.version}" for m in models]
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        for name in model_names:
            print(f"   - {name}")
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º Selection Policy
        print("\nüéØ –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤—ã–±–æ—Ä–∞")
        
        policy = ModelSelectionPolicy()
        
        # –ê–≤—Ç–æ–≤—ã–±–æ—Ä
        result = policy.select_model()
        assert result.model is not None, "–ê–≤—Ç–æ–≤—ã–±–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"
        assert result.model.id == 'flux-kontext-lora-v2', f"–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å: {result.model.id}"
        
        print(f"‚úÖ –ê–≤—Ç–æ–≤—ã–±–æ—Ä: {result.model.name} {result.model.version}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result.explanation}")
        
        # Fallback
        fallback = policy.get_fallback_model('flux-kontext-lora-v2', 'Test error')
        assert fallback.model is not None, "Fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"
        assert fallback.model.id == 'flux-kontext-lora-v1', f"–ù–µ–≤–µ—Ä–Ω—ã–π fallback: {fallback.model.id}"
        
        print(f"‚úÖ Fallback: {fallback.model.name} {fallback.model.version}")
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–º–æ–∫)
        print("\nüåê –®–∞–≥ 5: –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–æ–≤")
        
        # –ú–æ–∫–∞–µ–º Flask app
        from app_api import app
        
        with app.test_client() as client:
            # GET /models
            response = client.get('/models')
            assert response.status_code == 200
            
            data = json.loads(response.data)
            assert data['success'] == True
            assert len(data['models']) >= 3
            
            print("‚úÖ GET /models —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # GET /models/:id
            response = client.get('/models/flux-kontext-lora-v2')
            assert response.status_code == 200
            
            data = json.loads(response.data)
            assert data['success'] == True
            assert data['model']['id'] == 'flux-kontext-lora-v2'
            
            print("‚úÖ GET /models/:id —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        print("\nüë§ –®–∞–≥ 6: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        available_models = registry.get_all_models(active_only=True)
        print(f"   2. –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(available_models)} –º–æ–¥–µ–ª–µ–π")
        
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å V2
        selected_model_id = 'flux-kontext-lora-v2'
        selected_model = registry.get_model_by_id(selected_model_id)
        print(f"   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {selected_model.name} {selected_model.version}")
        
        # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        print(f"   4. –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"      - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {len(selected_model.pros)} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"      - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {len(selected_model.cons)} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"      - Guidance Scale: {selected_model.spec.guidance_scale}")
        
        # 5. "–û–±—Ä–∞–±–æ—Ç–∫–∞" —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é (–º–æ–∫)
        print("   5. –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        processing_result = policy.select_model(user_model_id=selected_model_id)
        assert processing_result.model.id == selected_model_id
        print(f"   6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –º–æ–¥–µ–ª—å—é: {processing_result.model.name}")
        
        # –®–∞–≥ 7: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüìù –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        log_data = {
            'selected_model': selected_model.id,
            'selection_reason': 'User choice',
            'fallback_used': False
        }
        
        print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   - –ú–æ–¥–µ–ª—å: {log_data['selected_model']}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {log_data['selection_reason']}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéâ Model Registry System —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_db_path):
            os.unlink(test_db_path)

def test_error_scenarios():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüî• –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("-" * 40)
    
    try:
        # –ú–æ–∫–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        os.environ['OPENAI_API_KEY'] = 'test-key'
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
            test_db_path = tmp_db.name
        
        from src.database.db_manager import DatabaseManager
        from src.models.model_registry import ModelRegistry
        
        db_manager = DatabaseManager(test_db_path)
        db_manager.initialize_database()
        
        import src.database.db_manager as db_module
        db_module.db_manager = db_manager
        
        registry = ModelRegistry()
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
        model = registry.get_model_by_id('non-existent-model')
        assert model is None, "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏"
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏")
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        empty_models = registry.get_models_by_tag('non-existent-tag')
        assert len(empty_models) == 0, "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞")
        
        os.unlink(test_db_path)
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—à–∏–±–æ–∫: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–´–• E2E –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    success = True
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    if not test_model_registry_full_flow():
        success = False
    
    # –¢–µ—Å—Ç –æ—à–∏–±–æ–∫
    if not test_error_scenarios():
        success = False
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("Model Registry System –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        sys.exit(1)