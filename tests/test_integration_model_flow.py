"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import json
import time
import sqlite3
import tempfile
from pathlib import Path
from unittest.mock import Mock, patch, MagicMock
from PIL import Image
import io

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app_api import app as api_app
from src.models.model_registry import ModelRegistry
from src.models.selection_policy import ModelSelectionPolicy as SelectionPolicy
from src.processors.batch_processor import BatchProcessor


class TestFullUserFlow:
    """
    –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
    2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    3. –í—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å
    4. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    5. –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É"""
        self.test_client = api_app.test_client()
        self.test_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        os.environ['DATABASE_PATH'] = self.test_db.name
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        from src.database.db_manager import db_manager
        db_manager.initialize_database()
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
        os.unlink(self.test_db.name)
    
    def test_complete_user_journey(self):
        """–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞"""
        print("\nüéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("\nüì± –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        response = self.test_client.get('/')
        assert response.status_code == 200
        assert b'YM Image Processor' in response.data
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API
        print("\nüîÑ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
        response = self.test_client.get('/models')
        assert response.status_code == 200
        
        models_data = json.loads(response.data)
        assert models_data['success'] == True
        assert len(models_data['models']) >= 3
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(models_data['models'])} –º–æ–¥–µ–ª–µ–π:")
        for model in models_data['models']:
            print(f"   - {model['name']} {model['version']} (id: {model['id']})")
        
        # –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        print("\nüéØ –®–∞–≥ 3: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        selected_model_id = 'flux-kontext-lora-v2'
        
        response = self.test_client.get(f'/models/{selected_model_id}')
        assert response.status_code == 200
        
        model_details = json.loads(response.data)
        assert model_details['success'] == True
        assert model_details['model']['id'] == selected_model_id
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_details['model']['name']} {model_details['model']['version']}")
        print(f"   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {len(model_details['model']['pros'])} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {len(model_details['model']['cons'])} –ø—É–Ω–∫—Ç–æ–≤")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("\nüñºÔ∏è –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        test_image = Image.new('RGB', (800, 800), color='white')
        from PIL import ImageDraw
        draw = ImageDraw.Draw(test_image)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ–¥—É–∫—Ç (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥)
        draw.ellipse([200, 200, 600, 600], fill='red')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = io.BytesIO()
        test_image.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        print("\n‚öôÔ∏è –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã API
        with patch('src.processors.batch_processor.fal_client') as mock_fal:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            mock_result = {
                'images': [{
                    'url': 'https://example.com/result.png'
                }]
            }
            mock_fal.subscribe.return_value = mock_result
            
            # –ú–æ–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with patch('requests.get') as mock_get:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                result_image = Image.new('RGBA', (800, 800), color=(255, 255, 255, 0))
                draw = ImageDraw.Draw(result_image)
                draw.ellipse([200, 200, 600, 600], fill=(255, 0, 0, 255))
                
                result_buffer = io.BytesIO()
                result_image.save(result_buffer, format='PNG')
                result_buffer.seek(0)
                
                mock_response = Mock()
                mock_response.content = result_buffer.getvalue()
                mock_get.return_value = mock_response
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                data = {
                    'modelId': selected_model_id,
                    'enhance': 'true',
                    'debug': 'false'
                }
                
                # –î–ª—è API –≤–µ—Ä—Å–∏–∏ –º—ã –±—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ POST –∑–∞–ø—Ä–æ—Å
                # –ó–¥–µ—Å—å –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                processor = BatchProcessor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                result = processor._remove_background_fal_v2(
                    test_image,
                    "test prompt",
                    model_id=selected_model_id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
                assert mock_fal.subscribe.called
                call_args = mock_fal.subscribe.call_args
                assert call_args[1]['arguments']['num_inference_steps'] == 50  # V2 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                assert call_args[1]['arguments']['guidance_scale'] == 3.5
                
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüìä –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å –ª–æ–≥–∏
        # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –±—ã–ª –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω
        print("‚úÖ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω:")
        print(f"   - –ú–æ–¥–µ–ª—å: {selected_model_id}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: Specified by user")
        print(f"   - –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –®–∞–≥ 7: –¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞
        print("\nüîÑ –®–∞–≥ 7: –¢–µ—Å—Ç fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        
        with patch('src.processors.batch_processor.fal_client') as mock_fal:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É V2
            mock_fal.subscribe.side_effect = Exception("API Error")
            
            # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å fallback
            policy = SelectionPolicy(ModelRegistry())
            fallback_model, reason = policy.get_fallback_model(selected_model_id)
            
            assert fallback_model.id == 'flux-kontext-lora-v1'
            print(f"‚úÖ Fallback —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_model.name} {fallback_model.version}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
        print("=" * 60)
    
    def test_batch_processing_with_models(self):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏"""
        print("\nüì¶ –¢–ï–°–¢: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        test_images = []
        for i in range(3):
            img = Image.new('RGB', (400, 400), color=['red', 'green', 'blue'][i])
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            buffer.seek(0)
            test_images.append(buffer)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ó–¥–µ—Å—å –±—ã –±—ã–ª —Ç–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
        
        print("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        print("\n" + "=" * 60)


def test_health_check_with_models():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    print("\nüè• HEALTH CHECK: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(delete=False, suffix='.db') as tmp_db:
        os.environ['DATABASE_PATH'] = tmp_db.name
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        from src.database.db_manager import db_manager
        db_manager.initialize_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        registry = ModelRegistry()
        models = registry.get_all_models()
        assert len(models) > 0, "–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        policy = SelectionPolicy(registry)
        selected, _ = policy.select_model()
        assert selected is not None, "–ê–≤—Ç–æ–≤—ã–±–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º
        os.unlink(tmp_db.name)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_flow = TestFullUserFlow()
    
    # Health check
    test_health_check_with_models()
    
    # –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É
    test_flow.setup_method()
    try:
        test_flow.test_complete_user_journey()
        test_flow.test_batch_processing_with_models()
    finally:
        test_flow.teardown_method()
    
    print("\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")