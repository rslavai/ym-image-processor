#!/usr/bin/env python3
"""–†–∞–±–æ—á–∏–π UI –¥–ª—è Yandex Market Image Processor."""

import gradio as gr
from PIL import Image
import numpy as np
import sys
from pathlib import Path
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
try:
    from src.processors.background import BackgroundRemover
    print("‚úì BackgroundRemover –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    remover = BackgroundRemover({
        'debug': False,
        'use_cache': True
    })
    processor_available = True
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BackgroundRemover: {e}")
    print("Traceback:", traceback.format_exc())
    processor_available = False
    remover = None

def process_image(image, use_alpha_matting, show_mask):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if image is None:
        return None, None, "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    if not processor_available:
        return None, None, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        remover.use_alpha_matting = use_alpha_matting
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        if show_mask:
            result, mask = remover.process(image, return_mask=True)
            mask_image = Image.fromarray(mask, mode='L')
        else:
            result = remover.process(image)
            mask_image = None
        
        return result, mask_image, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", traceback.format_exc())
        return None, None, error_msg

def create_test_image(image_type):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        from PIL import ImageDraw
        
        if image_type == "–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç":
            # –ë–µ–ª—ã–π —Ñ–æ–Ω —Å –∫—Ä–∞—Å–Ω—ã–º –∫—Ä—É–≥–æ–º
            img = Image.new('RGB', (400, 400), color=(255, 255, 255))
            draw = ImageDraw.Draw(img)
            draw.ellipse([50, 50, 350, 350], fill=(255, 0, 0))
            
        elif image_type == "–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω":
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —Å –∑–µ–ª–µ–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º
            img = Image.new('RGB', (400, 400))
            pixels = img.load()
            for i in range(400):
                for j in range(400):
                    pixels[i, j] = (
                        int(i * 255 / 400),
                        int(j * 255 / 400),
                        200
                    )
            draw = ImageDraw.Draw(img)
            draw.rectangle([100, 100, 300, 300], fill=(0, 255, 0))
            
        else:  # –¢–æ–≤–∞—Ä –Ω–∞ —Ñ–æ–Ω–µ
            # –°–µ—Ä—ã–π —Ñ–æ–Ω —Å —Å–∏–Ω–µ–π "–∫–æ—Ä–æ–±–∫–æ–π"
            img = Image.new('RGB', (400, 400), color=(200, 200, 200))
            draw = ImageDraw.Draw(img)
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä–æ–±–∫–∞
            draw.rectangle([100, 150, 300, 350], fill=(50, 100, 200))
            draw.rectangle([100, 100, 300, 150], fill=(70, 120, 220))
            
        return img
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(
    title="YM Image Processor",
    theme=gr.themes.Soft()
) as demo:
    
    gr.Markdown(
        """
        # üõçÔ∏è Yandex Market Image Processor
        
        ### –ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞.
        """
    )
    
    with gr.Row():
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤–≤–æ–¥
        with gr.Column():
            input_image = gr.Image(
                label="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                type="pil",
                height=400
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            with gr.Row():
                alpha_matting = gr.Checkbox(
                    label="Alpha Matting",
                    value=False,
                    info="–ú—è–≥–∫–∏–µ –∫—Ä–∞—è (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)"
                )
                show_mask = gr.Checkbox(
                    label="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É",
                    value=False
                )
            
            # –ö–Ω–æ–ø–∫–∏
            with gr.Row():
                process_btn = gr.Button(
                    "üöÄ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω",
                    variant="primary",
                    scale=2
                )
                clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", scale=1)
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gr.Markdown("### –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            with gr.Row():
                test_type = gr.Radio(
                    choices=["–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç", "–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω", "–¢–æ–≤–∞—Ä –Ω–∞ —Ñ–æ–Ω–µ"],
                    value="–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç",
                    label="–¢–∏–ø"
                )
                create_test_btn = gr.Button("–°–æ–∑–¥–∞—Ç—å")
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with gr.Column():
            output_image = gr.Image(
                label="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                type="pil",
                height=400
            )
            mask_image = gr.Image(
                label="–ú–∞—Å–∫–∞",
                type="pil",
                height=300,
                visible=False
            )
            status = gr.Textbox(
                label="–°—Ç–∞—Ç—É—Å",
                value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞",
                interactive=False
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    process_btn.click(
        fn=process_image,
        inputs=[input_image, alpha_matting, show_mask],
        outputs=[output_image, mask_image, status]
    )
    
    clear_btn.click(
        fn=lambda: (None, None, None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞"),
        outputs=[input_image, output_image, mask_image, status]
    )
    
    create_test_btn.click(
        fn=create_test_image,
        inputs=[test_type],
        outputs=[input_image]
    )
    
    # –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –º–∞—Å–∫–∏
    show_mask.change(
        fn=lambda x: gr.update(visible=x),
        inputs=[show_mask],
        outputs=[mask_image]
    )

if __name__ == "__main__":
    print("\n" + "="*50)
    print("üöÄ –ó–∞–ø—É—Å–∫ Yandex Market Image Processor UI")
    print("="*50)
    print(f"–í–µ—Ä—Å–∏—è Gradio: {gr.__version__}")
    print(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úì' if processor_available else '‚úó'}")
    print("\n–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:7864")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("="*50 + "\n")
    
    demo.launch(
        server_name="127.0.0.1",
        server_port=7864,
        share=False,
        inbrowser=False,
        quiet=False
    )